/**
 * Simple utility functions used by the Bubble Sort code.
 * 
 * @author Raymond Lister 
 * @version April 2018
 */
class Other
{
    
    /** 
     * This method checks if an array is sorted into ascending order. 
     * 
     * At the time you complete this lab exerise on 
     * bubSort04, you are NOT expected to understand the
     * code in this method.
     * 
     * @param   a       An array of integers
     * @param   first   A valid position in the array "a"
     * @param   last    A valid position in the array "a", where first is less than or equal to last
     * 
     * @return  1 if the elements from "first" to "last" are sorted, otherwise return -1. 
     */
    private static int isSorted(int [] a, int first, int last)
    {
        // System.out.print("isSorted(");
        // printArray(a);
        // System.out.print(", " + first + ", " + last + ");");

        for (int i=first+1 ; i<=last ; ++i )
        {
            if ( a[i-1] > a[i] )
            {
                // System.out.println(" NOT sorted, return something other than 1");
                return -1;
            }
        }
 
        // System.out.println(" sorted, so return 1");

        return 1;

    } // method isSorted

    /**
     * Prints out an array, with opening and closing braces, and
     * comma separated elements. For example "{1,2,3,4}". 
     *
     * @param   a       An array of integers
     */
    public static void printArray(int [] a)
    {
        System.out.print("{" + a[0]);

        for (int i=1 ; i<a.length ; ++i )
            System.out.print("," + a[i]);

        System.out.print("}");

    } // method printArray
    
    
    /**
     * Returns the position of the largest element in the given portion of the array.
     * 
     * If there is more than one occurrence of the maximum element,
     * maxPosition will return one of the positions,
     * but exactly which of those positions is not defined.
     * 
     * At the time you complete this lab exerise on 
     * bubSort04, you are NOT expected to understand the
     * code in this method.
     * 
     * @param   a       An array of integers
     * @param   first   A valid position in the array "a"
     * @param   last    A valid position in the array "a", where first is less than or equal to last
     * 
     * @return  The POSITION of the maximum element in array "a" between positions "first and "last" (inclusive).
     */
    private static int maxPosition(int [] a, int first, int last)
    {
        // System.out.print("maxPosition(");
        // printArray(a);
        // System.out.print(", " + first + ", " + last + ");");

        int maxPositionSoFar = first;

        for (int i=first+1 ; i<=last ; ++i )
        {
            if ( a[i] >= a[maxPositionSoFar] )
                maxPositionSoFar = i;
        }

        // System.out.println(" return maxPositionSoFar = " + maxPositionSoFar + "  ");

        return maxPositionSoFar;

    } // method maxPosition
    
    
    /**
     * Returns the position of the smallest element in the given portion of the array.
     * 
     * If there is more than one occurrence of the minimum element,
     * minPosition will return one of the positions,
     * but exactly which of those positions is not defined.
     * 
     * @param   a       An array of integers
     * @param   first   A valid position in the array "a"
     * @param   last    A valid position in the array "a", where first is less than or equal to last
     * 
     * @return  The POSITION of the maximum element in array "a" between positions "first and "last" (inclusive).
     */
    private static int minPosition(int [] a, int first, int last)
    {
        // System.out.print("minPosition(");
        // printArray(a);
        // System.out.print(", " + first + ", " + last + ");");

        int minPositionSoFar = first;

        for (int i=first+1 ; i<=last ; ++i )
        {
            if ( a[i] <= a[minPositionSoFar] )
                minPositionSoFar = i;
        }

        // System.out.println(" return minPositionSoFar = " + minPositionSoFar + "  ");

        return minPositionSoFar;

    } // method minPosition

        
    /* This method generates output that is useful
     * when debugging bubSort04.
     * 
     * Also, plate EXPECTS to see the output generated by this method.
     * 
     * At the time you complete this lab exerise on 
     * bubSort04, you are NOT expected to understand the
     * code in this method.
     */
    public static void debug(String message, int [] x, int i)
    {   
        System.out.print("              ... " + message + " ");
        // System.out.print("  ");
        // System.out.println();
        // printArray(x);
        // System.out.println();
        // System.out.print("  ");
        
        if ( minPosition(x,i,x.length-1) != i )
        {
            System.out.println("No!");
            // System.out.println();
            // System.out.print("  ... maxPosition(");
            // printArray(x);
            // System.out.println(",0," + i + ") != " + i);
            return;
        }
       
        if ( maxPosition(x,0,i) != i )
        {
            System.out.println("No!");
            // System.out.println();
            // System.out.print("  ... maxPosition(");
            // printArray(x);
            // System.out.println(",0," + i + ") != " + i);
            return;
        }

        // System.out.print("  ");

        if ( isSorted(x,i,x.length-1) != 1 )
        {
            System.out.println("No!");
            // System.out.println();
            return;
        }  

        System.out.println("Yes!");  
        // System.out.println();
    }
        
    /**
     * Swaps the contents of positions i and j in the array.
     */
    public static void swap(int [] a, int i, int j)
    {
        int temp;
        
        temp = a[i];
        a[i] = a[j];
        a[j] = temp;
        
        System.out.print("swap, array is now ");
        printArray(a);
        System.out.println();
    
    } // method swap
    
} // class
